import streamlit as st
from streamlit_extras.switch_page_button import switch_page
from streamlit_extras.stylable_container import stylable_container
from streamlit_extras.add_vertical_space import add_vertical_space
import os

from css_code.css_methode import *

st.set_page_config(
    page_title="10K in Paris - M√©thode",
    page_icon="üèÉ‚Äç‚ôÇÔ∏è",
    initial_sidebar_state="expanded",
)

def lecture_image(chemins):
    # D√©finir le chemin relatif vers l'image
    image_path = os.path.join(chemins[0], chemins[1], chemins[2])
    
    # V√©rifier que le fichier existe avant d'essayer de le charger
    if os.path.exists(image_path):
        st.image(image_path)
    else:
        st.error(f"Le fichier '{image_path}' n'existe pas.")

# D√©finition du style de la sidebar
st.markdown(css_sidebar, unsafe_allow_html=True)

tab1, tab2, tab3, tab4, tab5 = st.tabs(["M√©thode !", "L'algorithme", "Le jeux de donn√©es", "Les mod√®les de Machine Learning", "Optimisation des r√©sultats"])

#####################################################################################################
# Introduction
#####################################################################################################

with tab1:
    add_vertical_space(2)
    col1, col2 = st.columns([2,5])
    with col1:
        lecture_image(["Images", "methode", "Methode_animation.gif"])
        
    with col2:
        st.markdown("""
                        La m√©thode principale de ce projet tourne autour de la capacit√© √† d√©terminer les bonnes valeurs des param√®tres d'un algorithme qui g√©n√®re un itin√©raire.
                                
                        Pour cela J'ai d√π coder un algorithme, cr√©er des jeux de donn√©es, entra√Æner des mod√®les de pr√©dictions.
                        Et enfin optimiser ces pr√©dictions √† travers l'analyse et des m√©thodes d'optimisation.
                    """)

#####################################################################################################
# L'algorithme
#####################################################################################################

with tab2:
    col1, col2 = st.columns([1,5])
    with col1:
        lecture_image(["Images", "methode", "map_animation.gif"])
    with col2:
        add_vertical_space(2)
        st.markdown("""
                        Le principe de base de l'algorithme pour g√©n√©rer un itin√©raire est la cr√©ation de points de passage.
                    """)
    
    col1, col2 = st.columns([5,5])
    with col1:
        st.markdown("""
                        1) On d√©finit un point central qui se trouve entre le point de d√©part et le centre de Paris. Ce point central doit √©galement √™tre √† une certaine distance (topographique) R du point de d√©part.
                    """)
        st.markdown(css_sous_titre_start +
                    """
                        (Dans l'ordre de gauche √† droite : Point de D√©part, Point Central, Centre de Paris)
                    """
                    + css_sous_titre_end, unsafe_allow_html=True)
    with col2:
        lecture_image(["Images", "methode", "algo_paris_1.png"])

    add_vertical_space(2)
    col1, col2 = st.columns([5,5])
    with col1:
        lecture_image(["Images", "methode", "algo_paris_2.png"])
    with col2:
        st.markdown("""
                        2) Ensuite on d√©finit un certain nombre de points de passage √† cette m√™me distance R du point centrale selon diff√©rents angles. 
                    """)
        st.markdown(css_sous_titre_start +
                    """
                        (Point de D√©part: Jaune, Point Central: Rouge, Points de Passage: Blanc)
                    """
                    + css_sous_titre_end, unsafe_allow_html=True)

    add_vertical_space(2)
    col1, col2 = st.columns([3,5])
    with col1:
        st.markdown("""
                        3) Enfin on relie les points de passage via un algorithme de pathfinding.  
                    """)
    with col2:
        lecture_image(["Images", "methode", "algo_paris_3.png"])



#####################################################################################################
# Le jeux de donn√©es
#####################################################################################################

with tab3:
    st.markdown("""
                    La cr√©ation du premier jeu de donn√©es s'appuie sur le d√©coupage de Paris en zone.  
                    Une r√©partition uniforme des valeurs des diff√©rents param√®tres de l'algorithme a √©t√© faite pour √©viter d'avoir un biais au d√©part.
                """)

    lecture_image(["Images", "methode", "paris_jdd_decoupe.png"])

    st.markdown(css_sous_titre_start +
                """
                    On supprime les zones qui n'ont pas de noeud (point orange). Ensuite on g√©n√®re pour chaque zone restante 8 √©chantillons al√©atoirement de sorte √† couvrir uniform√©ment la surface de Paris.
                """
                + css_sous_titre_end, unsafe_allow_html=True)


#####################################################################################################
# Les mod√®les de Machine Learning
#####################################################################################################

with tab4:
    
    col1, col2 = st.columns([10,1])
    with col1:
        st.markdown("""
                    On utilise des mod√®les de R√©gression pour optimiser les param√®tres de sorte √† obtenir une distance proche des 10 km.
                    (RandomForestRegressor, DecisionTreeRegressor, GradientBoostingRegressor, GaussianProcessRegressor, KernelRidge, SVR)
                """)

        add_vertical_space(2)
        st.markdown("""
                        La comparaison de mod√®les avec affutage des hyperparam√®tres a donn√© des r√©sultats positifs en particulier pour le mod√®le SVR.  
                        Cependant l'√©cart entre la distance obtenue et les 10 km √©tait souvent trop important.
                    """)
    
    add_vertical_space(3)
    lecture_image(["Images", "methode", "cible_avant.jpg"])

    st.markdown(css_sous_titre_start +
                """
                    La moiti√© sup√©rieure repr√©sente les r√©sultats o√π a une distance sup√©rieure √† 10km et la moiti√© inf√©rieure ceux avec une distance inf√©rieure √† 10km.
                    Les % correspondent au nombre de cas sous la limite (en m√®tre) correspondante.
                """
                + css_sous_titre_end, unsafe_allow_html=True)

#####################################################################################################
# Optimisation des r√©sultats
#####################################################################################################

with tab5:
    st.markdown("""
                    Afin d'am√©liorer les r√©sultats je suis parti sur des m√©thodes d'optimisation.  
                    J'ai cr√©√© un nouveau jeu de donn√©es qui reprend uniquement les noeuds du r√©seau.
                    J'ai ensuite utilis√© mon meilleur mod√®le de r√©gression pour avoir des param√®tres plus optimis√©s.  
                    Puis j'ai utilis√© deux m√©thodes.

                    1) La premi√®re m√©thode est l'optimisation pas √† pas.  
                    J'ai ainsi obtenue pour chaque noeud la valeur du param√®tre la plus optimale possible.
                
                    2) La seconde m√©thode est l'optimisation par le meilleur voisin.
                    J'ai cherch√© le voisin qui donne le meilleur r√©sultat en cumulant son parcours avec la distance du noeud initial.
                    Cette derni√®re a v√©ritablement permis de compenser une partie des d√©fauts de l'algorithme de d√©part.
                """)

    add_vertical_space(3)
    col1, col2 = st.columns([1,1])
    with col1:
        _, col1b = st.columns([1,17])
        with col1b:
            st.markdown("**R√©sultat avant optimisation**")
            st.markdown(css_orange_sep, unsafe_allow_html=True)
            
        add_vertical_space(2)
        col1c, _ = st.columns([6,2])
        with col1c:
            lecture_image(["Images", "methode", "cible_avant.jpg"])
        add_vertical_space(2)
        lecture_image(["Images", "methode", "image_res_avant_opti.jpg"])
        st.markdown(css_sous_titre_start +
                    """
                    Avant optimisation : jeux de donn√©es de 1180 lignes.
                    """
                    + css_sous_titre_end, unsafe_allow_html=True)
        
    with col2:
        _, col2b = st.columns([1,17])
        with col2b:
            st.markdown("**R√©sultat apr√®s optimisation**")
            st.markdown(css_orange_sep, unsafe_allow_html=True)
            
        add_vertical_space(2)
        col2c, _ = st.columns([5,2])
        with col2c:
            lecture_image(["Images", "methode", "cible_apres.jpg"])
        add_vertical_space(2)
        lecture_image(["Images", "methode", "image_res_apres_opti.jpg"])
        st.markdown(css_sous_titre_start +
                    """
                    Apr√®s optimisation : jeux de donn√©es de 15844 lignes.
                    """
                    + css_sous_titre_end, unsafe_allow_html=True)
